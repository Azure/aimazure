name: CI Build
on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
  release:
    types: [published]

env:
  ARM_TEMPLATE_TEST_DIR: 'tests/armtemplates'
  CHOCO_CONFIG_DIR: 'build/chocolatey'
  CHOCO_PACKAGE_OUTPUT_DIR: 'choco-package'
  CHOCO_PACKAGE_REPO_PUBLIC: 'https://push.chocolatey.org'
  CHOCO_SRC_DIR: 'choco-src'
  OUTPUT_DIR: 'dist'
  SCRIPT_MAX_RETRIES: 4
  SCRIPT_RETRY_SLEEP_IN_SECONDS: 10
  VERSION_NUMBER_SEM1: 'NOT SET'
  VERSION_NUMBER_SUFFIX_SEM1: ''
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  build-and-test:
    runs-on: windows-latest
    steps:      

      - name: Checkout from default branch      
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: actions/checkout@v2

      - name: Checkout from main branch
        if: github.event_name == 'release'
        uses: actions/checkout@v2
        with:
          ref: main

      # Chocolatey unpacks the template files into a directory during installation which is 131 characters in length. 
      # The install of the package will fail if the template plus file full name is more than 129 characters (it breaches the 260 char windows path limit)
      # The following step checks for this.
      - name: Test template file names
        run: powershell .\tests\chocolatey\Test-ChocolateyFilePaths.ps1 -templateRootDirectory "..\..\templates\" -chocoCacheOffset 131
  
      - name: Set the version number suffix
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        shell: bash
        run: |
          seconds_at_midnight=$(date --utc -d 'today 00:00:00' +"%s")
          seconds_now=$(date --utc +"%s")
          seconds_since_midnight=$((seconds_now - seconds_at_midnight))
          seconds_since_midnight_padded=`printf %05d $seconds_since_midnight`
          echo ::set-env name=VERSION_NUMBER_SUFFIX_SEM1::-$(cat ./version-suffix.txt)-$(date --utc +%Y%m%d$seconds_since_midnight_padded)

      - name: Set the version number
        shell: bash
        run: |	
          echo ::set-env name=VERSION_NUMBER_SEM1::$(cat ./version-number.txt)${{ env.VERSION_NUMBER_SUFFIX_SEM1 }}

      - name: Create the Chocolatey verification file and copy the license file
        shell: bash
        run: |         
          mkdir -p ./${{ env.OUTPUT_DIR }}/${{ env.CHOCO_SRC_DIR }}     
          cp ./LICENSE ./${{ env.OUTPUT_DIR }}/${{ env.CHOCO_SRC_DIR }}/LICENSE.txt
          cp ./VERIFICATION ./${{ env.OUTPUT_DIR }}/${{ env.CHOCO_SRC_DIR }}/VERIFICATION.txt
          echo "Checksums for the files in the package are:" >> ./${{ env.OUTPUT_DIR }}/${{ env.CHOCO_SRC_DIR }}/VERIFICATION.txt
          find ${{ env.OUTPUT_DIR }}/${{ env.CHOCO_SRC_DIR }} -type f  | 
          while read f
          do
            filename="$(basename $f) [$f]"
            filehash=$(sha256sum $f | awk '{print $1}')
            echo "$filename -- $filehash" >> ./${{ env.OUTPUT_DIR }}/${{ env.CHOCO_SRC_DIR }}/VERIFICATION.txt
          done

      - name: Create the Chocolatey package output directory
        shell: bash
        run: |
          mkdir -p ./${{ env.OUTPUT_DIR }}/${{ env.CHOCO_PACKAGE_OUTPUT_DIR }}
  
          find ./${{ env.CHOCO_CONFIG_DIR }} -name "*.nuspec" |
          while read f
          do
            choco pack $f --version=${{ env.VERSION_NUMBER_SEM1 }} --outputdirectory ./${{ env.OUTPUT_DIR }}/${{ env.CHOCO_PACKAGE_OUTPUT_DIR }}
          done
  
      - name: Push the Chocolatey package to the public repo on a GitHub Release
        if: github.event_name == 'release'
        shell: bash
        run: | 
          find ./${{ env.OUTPUT_DIR }}/${{ env.CHOCO_PACKAGE_OUTPUT_DIR }}/ -name "*.nupkg" |
          while read f; do
            retryCount=0
            while true; do 
              choco push $f -s ${{ env.CHOCO_PACKAGE_REPO_PUBLIC }} -k ${{ secrets.AIM_CHOCO_PUBLIC_REPO_TOKEN }} && break
              retryCount=$((retryCount+1))
              if (( "$retryCount" <= ${{ env.SCRIPT_MAX_RETRIES }} )); then
                echo "Retrying the processing of $f"			
                sleep ${{ env.SCRIPT_RETRY_SLEEP_IN_SECONDS }}
              else
                break
              fi
            done
          done

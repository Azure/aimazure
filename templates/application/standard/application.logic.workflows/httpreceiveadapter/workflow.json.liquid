{
	"definition": {
		"$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
		"actions": {
			"Initialize_StatusCode_variable": {
				"type": "InitializeVariable",
				"inputs": {
					"variables": [
						{
							"name": "StatusCode",
							"type": "integer",
							"value": 500
						}
					]
				},
				"runAfter": {}
			},
			"Initialize_FaultMessage_variable": {
				"type": "InitializeVariable",
				"inputs": {
					"variables": [
						{
							"name": "FaultMessage",
							"type": "object"
						}
					]
				},
				"runAfter": {
					"Initialize_StatusCode_variable": [
						"Succeeded"
					]
				}
			},
			"Initialize_ErrorMessage_variable": {
				"type": "InitializeVariable",
				"inputs": {
					"variables": [
						{
							"name": "ErrorMessage",
							"type": "string",
							"value": "An error occurred in the @{workflow()?['name']} (@{workflow()?['run']?['name']}) workflow"
						}
					]
				},
				"runAfter": {
					"Initialize_FaultMessage_variable": [
						"Succeeded"
					]
				}
			},
			"Initialize_ResponseMessage_variable": {
				"type": "InitializeVariable",
				"inputs": {
					"variables": [
						{
							"name": "ResponseMessage",
							"type": "object",
							"value": null
						}
					]
				},
				"runAfter": {
					"Initialize_ErrorMessage_variable": [
						"Succeeded"
					]
				}
			},
			"Initialize_Checkpoint_variable": {
				"type": "InitializeVariable",
				"inputs": {
					"variables": [
						{
							"name": "Checkpoint",
							"type": "string"
						}
					]
				},
				"runAfter": {
					"Initialize_ResponseMessage_variable": [
						"Succeeded"
					]
				}
			},
			"Initialize_Configuration_variable": {
				"type": "InitializeVariable",
				"inputs": {
					"variables": [
						{
							"name": "Configuration",
							"type": "object"
						}
					]
				},
				"runAfter": {
					"Initialize_Checkpoint_variable": [
						"Succeeded"
					]
				}
			},
			"Initialize_TwoWayResponseMessage_variable": {
				"runAfter": {
					"Initialize_Configuration_variable": [
						"Succeeded"
					]
				},
				"type": "InitializeVariable",
				"inputs": {
					"variables": [
						{
							"name": "TwoWayResponseMessage",
							"type": "object"
						}
					]
				}
			},
			"Initialize_TwoWayResponseContent_variable": {
				"runAfter": {
					"Initialize_TwoWayResponseMessage_variable": [
						"Succeeded"
					]
				},
				"type": "InitializeVariable",
				"inputs": {
					"variables": [
						{
							"name": "TwoWayResponseContent",
							"type": "string"
						}
					]
				}
			},
			"Respond:_Were_we_successful": {
				"actions": {
					"Respond:_Is_this_a_TwoWay_adapter": {
						"actions": {
							"Respond:TwoWay:_Get_ResponseHandlerUrl": {
								"type": "Http",
								"inputs": {
									"method": "GET",
									"uri": "@{appsetting('apimBaseUrl')}/aimroutingmanager/standardlogicappcallbackurl/@{encodeURIComponent(appsetting('systemApplicationResourceGroupName'))}/@{encodeURIComponent(appsetting('systemApplicationLogicAppName'))}/messageresponsehandler",
									"headers": {
										"Ocp-Apim-Subscription-Key": "@appsetting('apimSubscriptionKey')"
									},
									"queries": {
										"clearCache": "@parameters('clearCache')"
									},
									"retryPolicy": {
										"type": "none"
									}
								},
								"runAfter": {}
							},
							"Respond:TwoWay:_Call_Response_Handler": {
								"runAfter": {
									"Respond:TwoWay:_Get_ResponseHandlerUrl": [
										"Succeeded"
									]
								},
								"type": "Http",
								"inputs": {
									"method": "POST",
									"uri": "@{body('Respond:TwoWay:_Get_ResponseHandlerUrl')?['logicAppUrl']}",
									"body": {
										"responseTopicName": "@{parameters('{{ resource_template.parameters.workflow_name }}.httpReceiveAdapter.responseTopicName')}",
										"responseSubscriptionName": "@{parameters('{{ resource_template.parameters.workflow_name }}.httpReceiveAdapter.responseSubscriptionName')}",
										"correlationId": "@variables('ResponseMessage')?['header']?['properties']?['correlationId']",
										"responseTimeoutInMinutes": "@coalesce(variables('Configuration')?['httpReceiveAdapter']?['responseTimeoutInMinutes'], 3)"
									},
									"headers": {
										"Aim-Clear-Cache": "@coalesce(variables('Configuration')?['globalConfig']?['clearCache'], 'false')",
										"Aim-Enable-Trace": "@coalesce(variables('Configuration')?['globalConfig']?['enableTrace'], 'false')"
									},
									"retryPolicy": {
										"type": "none"
									}
								}
							},
							"Respond:TwoWay:_Check_StatusCode": {
								"runAfter": {
									"Respond:TwoWay:_Set_StatusCode_variable": [
										"Succeeded"
									]
								},
								"cases": {
									"Success": {
										"case": 200,
										"actions": {
											"Respond:TwoWay:Success:_Set_TwoWayResponseMessage_variable": {
												"runAfter": {},
												"type": "SetVariable",
												"inputs": {
													"name": "TwoWayResponseMessage",
													"value": "@body('Respond:TwoWay:_Call_Response_Handler')"
												}
											},
											"Respond:TwoWay:Success:_Check_TwoWayResponse_ContentType": {
												"runAfter": {
													"Respond:TwoWay:Success:_Set_TwoWayResponseMessage_variable": [
														"Succeeded"
													]
												},
												"type": "If",
												"actions": {
													"Respond:TwoWay:Success:_Get_Response_BodyContent": {
														"runAfter": {},
														"type": "Http",
														"inputs": {
															"method": "POST",
															"uri": "@{appsetting('apimBaseUrl')}/aimmessagingmanager/getbodycontent",
															"headers": {
																"Ocp-Apim-Subscription-Key": "@appsetting('apimSubscriptionKey')",
																"Aim-Tracking-Id": "@{variables('ResponseMessage')?['header']?['properties']?['trackingId']}",
																"Content-Type": "application/json"
															},
															"body": "@if(equals(variables('TwoWayResponseMessage')?['$content-encoding'], 'Base64'), json(decodeBase64(variables('TwoWayResponseMessage')?['$content'])), variables('TwoWayResponseMessage')?['$content'])",
															"queries": {
																"clearCache": "@coalesce(variables('Configuration')?['globalConfig']?['clearCache'], 'false')",
																"enableTrace": "@coalesce(variables('Configuration')?['globalConfig']?['enableTrace'], 'false')"
															},
															"retryPolicy": {
																"type": "none"
															}
														}
													},
													"Respond:TwoWay:Success:GetBodyContent:_Check_Status_Code": {
														"runAfter": {
															"Respond:TwoWay:Success:GetBodyContent:_Set_StatusCode_variable": [
																"Succeeded"
															]
														},
														"cases": {
															"Success": {
																"case": 200,
																"actions": {
																	"Respond:TwoWay:Success:GetBodyContent:_Set_TwoWayResponseContent_variable": {
																		"runAfter": {},
																		"type": "SetVariable",
																		"inputs": {
																			"name": "TwoWayResponseContent",
																			"value": "@decodeBase64(body('Respond:TwoWay:Success:_Get_Response_BodyContent')?['$content'])"
																		}
																	},
																	"Respond:TwoWay:Success:GetBodyContent:Success:_Send_Response": {
																		"inputs": {
																			"body": "@variables('TwoWayResponseContent')",
																			"statusCode": 200,
																			"headers": {
																				"Content-Type": "@body('Respond:TwoWay:Success:_Get_Response_BodyContent')?['$contentType']"
																			}
																		},
																		"kind": "Http",
																		"runAfter": {
																			"Respond:TwoWay:Success:GetBodyContent:_Set_TwoWayResponseContent_variable": [
																				"Succeeded"
																			]
																		},
																		"type": "Response"
																	}
																}
															}
														},
														"default": {
															"actions": {
																"Respond:TwoWay:Success:GetBodyContent:Failure:_Do_we_have_a_Fault_Message": {
																	"actions": {
																		"Respond:TwoWay:Success:GetBodyContent:Fault:_Set_ErrorMessage_variable": {
																			"runAfter": {
																				"Respond:TwoWay:Success:GetBodyContent:Fault:_Set_FaultMessage_variable": [
																					"Succeeded"
																				]
																			},
																			"type": "SetVariable",
																			"inputs": {
																				"name": "ErrorMessage",
																				"value": "An error occurred in @{workflow()?['name']} (@{workflow()?['run']?['name']}) trying to call the MessageManager GetBodyContent operation"
																			}
																		},
																		"Respond:TwoWay:Success:GetBodyContent:Fault:_Set_FaultMessage_variable": {
																			"runAfter": {},
																			"type": "SetVariable",
																			"inputs": {
																				"name": "FaultMessage",
																				"value": "@body('Respond:TwoWay:Success:_Get_Response_BodyContent')"
																			}
																		}
																	},
																	"runAfter": {},
																	"else": {
																		"actions": {
																			"Respond:TwoWay:Success:GetBodyContent:NoFault:_Create_Fault_Message": {
																				"runAfter": {},
																				"type": "Compose",
																				"inputs": {
																					"fault": {
																						"faultActor": "@concat(workflow()?['name'], '.', actions('Respond:TwoWay:Success:_Get_Response_BodyContent')?['name'], ' (', workflow()?['run']?['name'], ')')",
																						"faultCategory": "Error",
																						"faultCode": "@{coalesce(outputs('Respond:TwoWay:Success:_Get_Response_BodyContent')?['statusCode'], outputs('Respond:TwoWay:Success:_Get_Response_BodyContent')?['body']?['statusCode'], actions('Respond:TwoWay:Success:_Get_Response_BodyContent')?['error']?['code'])}",
																						"faultMessage": "@{coalesce(outputs('Respond:TwoWay:Success:_Get_Response_BodyContent')?['error']?['message'], outputs('Respond:TwoWay:Success:_Get_Response_BodyContent')?['body']?['message'], actions('Respond:TwoWay:Success:_Get_Response_BodyContent')?['error']?['message'])}",
																						"faultReason": "@{actions('Respond:TwoWay:Success:_Get_Response_BodyContent')?['status']}"
																					}
																				}
																			},
																			"Respond:TwoWay:Success:GetBodyContent:NoFault:_Set_ErrorMessage_variable": {
																				"runAfter": {
																					"Respond:TwoWay:Success:GetBodyContent:NoFault:_Set_FaultMessage_variable": [
																						"Succeeded"
																					]
																				},
																				"type": "SetVariable",
																				"inputs": {
																					"name": "ErrorMessage",
																					"value": "An error occurred in @{workflow()?['name']} (@{workflow()?['run']?['name']}) trying to call the MessageManager GetBodyContent operation"
																				}
																			},
																			"Respond:TwoWay:Success:GetBodyContent:NoFault:_Set_FaultMessage_variable": {
																				"runAfter": {
																					"Respond:TwoWay:Success:GetBodyContent:NoFault:_Create_Fault_Message": [
																						"Succeeded"
																					]
																				},
																				"type": "SetVariable",
																				"inputs": {
																					"name": "FaultMessage",
																					"value": "@outputs('Respond:TwoWay:Success:GetBodyContent:NoFault:_Create_Fault_Message')"
																				}
																			}
																		}
																	},
																	"expression": {
																		"and": [
																			{
																				"not": {
																					"equals": [
																						"@body('Respond:TwoWay:Success:_Get_Response_BodyContent')?['fault']",
																						null
																					]
																				}
																			}
																		]
																	},
																	"type": "If"
																},
																"Respond:TwoWay:Success:GetBodyContent:Failure:_Build_NACK_message": {
																	"runAfter": {
																		"Respond:TwoWay:Success:GetBodyContent:Failure:_Do_we_have_a_Fault_Message": [
																			"Succeeded"
																		]
																	},
																	"type": "Compose",
																	"inputs": {
																		"body": [
																			{
																				"$content": {
																					"code": "500",
																					"message": "@variables('ErrorMessage')",
																					"lastCheckpoint": "@variables('Checkpoint')",
																					"fault": "@variables('FaultMessage')"
																				},
																				"$contentType": "application/json",
																				"$part": 1,
																				"$partType": "http://schemas.microsoft.com/aim#nack"
																			}
																		],
																		"header": {
																			"properties": {
																				"createDate": "@utcNow()",
																				"envelopeType": "nack",
																				"messageId": "@guid()",
																				"rootPart": 1,
																				"trackingId": "@body('Respond:TwoWay:_Call_Response_Handler')?['header']?['properties']?['trackingId']"
																			},
																			"routing": {
																				"MessageType": "http://schemas.microsoft.com/aim#nack"
																			},
																			"routingSlip": {},
																			"state": {}
																		}
																	}
																},
																"Respond:TwoWay:Success:GetBodyContent:Failure:_Get_SuspendUrl": {
																	"type": "Http",
																	"inputs": {
																		"method": "GET",
																		"uri": "@{appsetting('apimBaseUrl')}/aimroutingmanager/standardlogicappcallbackurl/@{encodeURIComponent(appsetting('systemApplicationResourceGroupName'))}/@{encodeURIComponent(appsetting('systemApplicationLogicAppName'))}/messagesuspendprocessor",
																		"headers": {
																			"Ocp-Apim-Subscription-Key": "@appsetting('apimSubscriptionKey')"
																		},
																		"queries": {
																			"clearCache": "@parameters('clearCache')"
																		},
																		"retryPolicy": {
																			"type": "none"
																		}
																	},
																	"runAfter": {
																		"Respond:TwoWay:Success:GetBodyContent:Failure:_Build_NACK_message": [
																			"Succeeded",
																			"Failed",
																			"TimedOut"
																		]
																	}
																},
																"Respond:TwoWay:Success:GetBodyContent:Failure:_Send_to_SuspendQueue": {
																	"runAfter": {
																		"Respond:TwoWay:Success:GetBodyContent:Failure:_Get_SuspendUrl": [
																			"Succeeded"
																		]
																	},
																	"type": "Http",
																	"inputs": {
																		"method": "POST",
																		"uri": "@{body('Respond:TwoWay:Success:GetBodyContent:Failure:_Get_SuspendUrl')?['logicAppUrl']}",
																		"body": {
																			"nackMessage": "@outputs('Respond:TwoWay:Success:GetBodyContent:Failure:_Build_NACK_message')",
																			"originalMessage": "@body('Respond:TwoWay:_Call_Response_Handler')",
																			"suspendQueueTopicName": "@{parameters('suspendQueueTopicName')}",
																			"failedMessageRouting": "@coalesce(variables('Configuration')?['httpReceiveAdapter']?['failedMessageRouting'], false)",
																			"scenario": "@{parameters('scenario')}"
																		},
																		"headers": {
																			"Aim-Clear-Cache": "@coalesce(variables('Configuration')?['globalConfig']?['clearCache'], 'false')",
																			"Aim-Enable-Trace": "@coalesce(variables('Configuration')?['globalConfig']?['enableTrace'], 'false')"
																		},
																		"retryPolicy": {
																			"type": "none"
																		}
																	}
																},
																"Respond:TwoWay:Success:GetBodyContent:Failure:_Send_Response": {
																	"inputs": {
																		"body": "@variables('FaultMessage')",
																		"statusCode": 500,
																		"headers": {
																			"Content-Type": "application/json"
																		}
																	},
																	"kind": "Http",
																	"runAfter": {
																		"Respond:TwoWay:Success:GetBodyContent:Failure:_Send_to_SuspendQueue": [
																			"Succeeded",
																			"Failed",
																			"TimedOut"
																		]
																	},
																	"type": "Response"
																}
															}
														},
														"expression": "@variables('StatusCode')",
														"type": "Switch"
													},
													"Respond:TwoWay:Success:GetBodyContent:_Set_StatusCode_variable": {
														"runAfter": {
															"Respond:TwoWay:Success:_Get_Response_BodyContent": [
																"Succeeded",
																"Failed",
																"Skipped",
																"TimedOut"
															]
														},
														"type": "SetVariable",
														"inputs": {
															"name": "StatusCode",
															"value": "@coalesce(outputs('Respond:TwoWay:Success:_Get_Response_BodyContent')['statusCode'], 500)"
														}
													}
												},
												"else": {
													"actions": {
														"Respond:TwoWay:Success:UnknownContentType:_Send_Response": {
															"inputs": {
																"body": "@if(equals(variables('TwoWayResponseMessage')?['$content-encoding'], 'Base64'), json(decodeBase64(variables('TwoWayResponseMessage')?['$content'])), variables('TwoWayResponseMessage')?['$content'])",
																"statusCode": 200,
																"headers": {
																	"Content-Type": "@variables('TwoWayResponseMessage')?['$content-type']"
																}
															},
															"kind": "Http",
															"runAfter": {},
															"type": "Response"
														}
													}
												},
												"expression": {
													"or": [
														{
															"equals": [
																"@variables('TwoWayResponseMessage')?['$content-type']",
																"text/json"
															]
														},
														{
															"equals": [
																"@variables('TwoWayResponseMessage')?['$content-type']",
																"application/json"
															]
														}
													]
												}
											}
										}
									}
								},
								"default": {
									"actions": {
										"Respond:TwoWay:Failure:_Create_Fault": {
											"runAfter": {},
											"type": "Compose",
											"inputs": {
												"fault": {
													"faultActor": "@concat(workflow()?['name'], '.', actions('Respond:TwoWay:_Call_Response_Handler')?['name'], ' (', workflow()?['run']?['name'], ')')",
													"faultCategory": "Error",
													"faultCode": "@{outputs('Respond:TwoWay:_Call_Response_Handler')?['statusCode']}",
													"faultMessage": "An error occurred whilst trying to get the response message for a two-way scenario.",
													"faultReason": "@{coalesce(body('Respond:TwoWay:_Call_Response_Handler')?['fault']?['faultMessage'], body('Respond:TwoWay:_Call_Response_Handler')?['error']?['message'])}"
												}
											}
										},
										"Respond:TwoWay:Failure:_Set_FaultMessage_variable": {
											"runAfter": {
												"Respond:TwoWay:Failure:_Create_Fault": [
													"Succeeded"
												]
											},
											"type": "SetVariable",
											"inputs": {
												"name": "FaultMessage",
												"value": "@outputs('Respond:TwoWay:Failure:_Create_Fault')"
											}
										},
										"Respond:TwoWay:Failure:_Create_NACK_Message": {
											"runAfter": {
												"Respond:TwoWay:Failure:_Set_FaultMessage_variable": [
													"Succeeded"
												]
											},
											"type": "Compose",
											"inputs": {
												"body": [
													{
														"$content": {
															"code": "500",
															"fault": "@variables('FaultMessage')",
															"message": "Action @{actions('Respond:TwoWay:_Call_Response_Handler')?['name']} resulted in an error response."
														},
														"$contentType": "application/json",
														"$part": 1,
														"$partType": "http://schemas.microsoft.com/aim#nack"
													}
												],
												"header": {
													"properties": {
														"createDate": "@utcNow()",
														"envelopeType": "nack",
														"messageId": "@guid()",
														"rootPart": 1,
														"trackingId": "@body('Respond:TwoWay:_Call_Response_Handler')?['header']?['properties']?['trackingId']"
													},
													"routing": {
														"MessageType": "http://schemas.microsoft.com/aim#nack"
													},
													"routingSlip": {},
													"state": {}
												}
											}
										},
										"Respond:TwoWay:Failure:_Get_SuspendUrl": {
											"type": "Http",
											"inputs": {
												"method": "GET",
												"uri": "@{appsetting('apimBaseUrl')}/aimroutingmanager/standardlogicappcallbackurl/@{encodeURIComponent(appsetting('systemApplicationResourceGroupName'))}/@{encodeURIComponent(appsetting('systemApplicationLogicAppName'))}/messagesuspendprocessor",
												"headers": {
													"Ocp-Apim-Subscription-Key": "@appsetting('apimSubscriptionKey')"
												},
												"queries": {
													"clearCache": "@parameters('clearCache')"
												},
												"retryPolicy": {
													"type": "none"
												}
											},
											"runAfter": {
												"Respond:TwoWay:Failure:_Create_NACK_Message": [
													"Succeeded",
													"Failed",
													"TimedOut"
												]
											}
										},
										"Respond:TwoWay:Failure:_Send_to_SuspendQueue": {
											"runAfter": {
												"Respond:TwoWay:Failure:_Get_SuspendUrl": [
													"Succeeded"
												]
											},
											"type": "Http",
											"inputs": {
												"method": "POST",
												"uri": "@{body('Respond:TwoWay:Failure:_Get_SuspendUrl')?['logicAppUrl']}",
												"body": {
													"nackMessage": "@outputs('Respond:TwoWay:Failure:_Create_NACK_Message')",
													"originalMessage": "@variables('ResponseMessage')",
													"suspendQueueTopicName": "@{parameters('suspendQueueTopicName')}",
													"failedMessageRouting": "@coalesce(variables('Configuration')?['httpReceiveAdapter']?['failedMessageRouting'], false)",
													"scenario": "@{parameters('scenario')}"
												},
												"headers": {
													"Aim-Clear-Cache": "@coalesce(variables('Configuration')?['globalConfig']?['clearCache'], 'false')",
													"Aim-Enable-Trace": "@coalesce(variables('Configuration')?['globalConfig']?['enableTrace'], 'false')"
												},
												"retryPolicy": {
													"type": "none"
												}
											}
										},
										"Respond:TwoWay:Failure:_Send_Fault_Response": {
											"inputs": {
												"body": "@variables('FaultMessage')",
												"statusCode": "@coalesce(outputs('Respond:TwoWay:_Call_Response_Handler')?['statusCode'], 500)",
												"headers": {
													"Content-Type": "application/json"
												}
											},
											"kind": "Http",
											"runAfter": {
												"Respond:TwoWay:Failure:_Send_to_SuspendQueue": [
													"Succeeded"
												]
											},
											"type": "Response"
										}
									}
								},
								"expression": "@variables('StatusCode')",
								"type": "Switch"
							},
							"Respond:TwoWay:_Set_StatusCode_variable": {
								"runAfter": {
									"Respond:TwoWay:_Call_Response_Handler": [
										"Succeeded",
										"Failed",
										"Skipped",
										"TimedOut"
									]
								},
								"type": "SetVariable",
								"inputs": {
									"name": "StatusCode",
									"value": "@coalesce(outputs('Respond:TwoWay:_Call_Response_Handler')?['statusCode'], 500)"
								}
							}
						},
						"runAfter": {},
						"else": {
							"actions": {
								"Respond:OneWay:_Send_Accepted_Response": {
									"inputs": {
										"statusCode": 202,
										"headers": {
											"Content-Type": "application/json"
										}
									},
									"kind": "Http",
									"runAfter": {},
									"type": "Response"
								}
							}
						},
						"expression": {
							"and": [
								{
									"equals": [
										"@coalesce(variables('Configuration')?['httpReceiveAdapter']?['isTwoWay'], false)",
										true
									]
								}
							]
						},
						"type": "if"
					}
				},
				"runAfter": {
					"Step:_Construct Message": [
						"Succeeded",
						"Failed",
						"Skipped",
						"TimedOut"
					]
				},
				"else": {
					"actions": {
						"Failure:_Do_we_have_a_NACK": {
							"actions": {},
							"runAfter": {},
							"else": {
								"actions": {
									"Failure:_Build_NACK_message": {
										"runAfter": {},
										"type": "Compose",
										"inputs": {
											"body": [
												{
													"$content": {
														"code": "500",
														"message": "@variables('ErrorMessage')",
														"lastCheckpoint": "@variables('Checkpoint')",
														"fault": "@variables('FaultMessage')"
													},
													"$contentType": "application/json",
													"$part": 1,
													"$partType": "http://schemas.microsoft.com/aim#nack"
												}
											],
											"header": {
												"properties": {
													"createDate": "@utcNow()",
													"envelopeType": "nack",
													"messageId": "@guid()",
													"rootPart": 1,
													"trackingId": "@triggerBody()?['header']?['properties']?['trackingId']"
												},
												"routing": {
													"MessageType": "http://schemas.microsoft.com/aim#nack"
												},
												"routingSlip": {},
												"state": {}
											}
										}
									},
									"Failure:_Set_ResponseMessage_variable": {
										"runAfter": {
											"Failure:_Build_NACK_message": [
												"Succeeded"
											]
										},
										"type": "SetVariable",
										"inputs": {
											"name": "ResponseMessage",
											"value": "@outputs('Failure:_Build_NACK_message')"
										}
									}
								}
							},
							"expression": {
								"and": [
									{
										"equals": [
											"@{coalesce(variables('ResponseMessage')?['header']?['properties']?['envelopeType'], '(unknown)')}",
											"nack"
										]
									}
								]
							},
							"type": "If"
						},
						"Failure:_Get_SuspendUrl": {
							"type": "Http",
							"inputs": {
								"method": "GET",
								"uri": "@{appsetting('apimBaseUrl')}/aimroutingmanager/standardlogicappcallbackurl/@{encodeURIComponent(appsetting('systemApplicationResourceGroupName'))}/@{encodeURIComponent(appsetting('systemApplicationLogicAppName'))}/messagesuspendprocessor",
								"headers": {
									"Ocp-Apim-Subscription-Key": "@appsetting('apimSubscriptionKey')"
								},
								"queries": {
									"clearCache": "@parameters('clearCache')"
								},
								"retryPolicy": {
									"type": "none"
								}
							},
							"runAfter": {
								"Failure:_Do_we_have_a_NACK": [
									"Succeeded"
								]
							}
						},
						"Failure:_Send_NACK_to_SuspendQueue": {
							"type": "Http",
							"inputs": {
								"method": "POST",
								"uri": "@{body('Failure:_Get_SuspendUrl')?['logicAppUrl']}",
								"headers": {
									"Aim-Clear-Cache": "@coalesce(variables('Configuration')?['globalConfig']?['clearCache'], 'false')",
									"Aim-Enable-Trace": "@coalesce(variables('Configuration')?['globalConfig']?['enableTrace'], 'false')"
								},
								"body": {
									"nackMessage": "@variables('ResponseMessage')",
									"originalMessage": "@triggerBody()",
									"suspendQueueTopicName": "@{parameters('suspendQueueTopicName')}",
									"failedMessageRouting": "@coalesce(variables('Configuration')?['httpReceiveAdapter']?['failedMessageRouting'], false)",
									"scenario": "@parameters('{{ resource_template.parameters.workflow_name }}.httpReceiveAdapter.scenarioName')"
								},
								"retryPolicy": {
									"type": "none"
								}
							},
							"runAfter": {
								"Failure:_Get_SuspendUrl": [
									"Succeeded"
								]
							}
						},
						"Failure:_Send_Fault_Response": {
							"inputs": {
								"body": {
									"fault": {
										"faultActor": "@{workflow()['name']} (@{workflow()?['run']?['name']})",
										"faultCategory": "Error",
										"faultCode": "500",
										"faultMessage": "@variables('ErrorMessage')",
										"faultReason": "@coalesce(variables('ResponseMessage')?['body']?[0]?['$content']?['message'], '')"
									}
								},
								"headers": {
									"Content-Type": "application/json"
								},
								"statusCode": 500
							},
							"kind": "Http",
							"runAfter": {
								"Failure:_Send_NACK_to_SuspendQueue": [
									"Succeeded",
									"Failed",
									"Skipped",
									"TimedOut"
								]
							},
							"type": "Response"
						}
					}
				},
				"expression": {
					"and": [
						{
							"equals": [
								"@variables('Checkpoint')",
								"ConstructMessageACK"
							]
						}
					]
				},
				"type": "If"
			},
			"Step:_Get_Configuration": {
				"type": "If",
				"expression": {
					"and": [
						{
							"equals": [
								"@variables('Checkpoint')",
								""
							]
						}
					]
				},
				"actions": {
					"GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep": {
						"type": "Http",
						"inputs": {
							"method": "GET",
							"uri": "@{appsetting('apimBaseUrl')}/aimconfigurationmanager/configuration/@{encodeURIComponent(parameters('{{ resource_template.parameters.workflow_name }}.httpReceiveAdapter.scenarioName'))}/httpReceiveAdapter",
							"headers": {
								"Ocp-Apim-Subscription-Key": "@appsetting('apimSubscriptionKey')"
							},
							"queries": {
								"clearCache": "@parameters('clearCache')"
							},
							"retryPolicy": {
								"type": "none"
							}
						},
						"runAfter": {}
					},
					"GetConfiguration:_Check_Status_Code": {
						"type": "Switch",
						"expression": "@variables('StatusCode')",
						"cases": {
							"Success": {
								"case": 200,
								"actions": {
									"GetConfiguration:Success:_Set_Checkpoint_variable": {
										"type": "SetVariable",
										"inputs": {
											"name": "Checkpoint",
											"value": "GetConfiguration"
										},
										"runAfter": {
											"GetConfiguration:Success:_Set_Configuration_variable": [
												"Succeeded"
											]
										}
									},
									"GetConfiguration:Success:_Set_Configuration_variable": {
										"type": "SetVariable",
										"inputs": {
											"name": "Configuration",
											"value": "@body('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')"
										},
										"runAfter": {}
									}
								}
							}
						},
						"default": {
							"actions": {
								"GetConfiguration:Failure:_Do_we_have_a_Fault_Message": {
									"type": "If",
									"expression": {
										"and": [
											{
												"not": {
													"equals": [
														"@body('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')?['fault']",
														null
													]
												}
											}
										]
									},
									"actions": {
										"GetConfiguration:Fault:_Set_ErrorMessage_variable": {
											"type": "SetVariable",
											"inputs": {
												"name": "ErrorMessage",
												"value": "An error occurred in @{workflow()?['name']} (@{workflow()?['run']?['name']}) trying to call the ConfigurationManager GetConfigurationForStep operation"
											},
											"runAfter": {
												"GetConfiguration:Fault:_Set_FaultMessage_variable": [
													"Succeeded"
												]
											}
										},
										"GetConfiguration:Fault:_Set_FaultMessage_variable": {
											"type": "SetVariable",
											"inputs": {
												"name": "FaultMessage",
												"value": "@body('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')"
											},
											"runAfter": {}
										}
									},
									"runAfter": {},
									"else": {
										"actions": {
											"GetConfiguration:NoFault:_Create_Fault_Message": {
												"type": "Compose",
												"inputs": {
													"fault": {
														"faultActor": "@concat(workflow()?['name'], '.', actions('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')?['name'], ' (', workflow()?['run']?['name'], ')')",
														"faultCategory": "Error",
														"faultCode": "@{coalesce(outputs('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')?['statusCode'], outputs('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')?['body']?['statusCode'], actions('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')?['error']?['code'])}",
														"faultMessage": "@{coalesce(outputs('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')?['error']?['message'], outputs('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')?['body']?['message'], actions('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')?['error']?['message'])}",
														"faultReason": "@{actions('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')?['status']}"
													}
												},
												"runAfter": {}
											},
											"GetConfiguration:NoFault:_Set_ErrorMessage_variable": {
												"type": "SetVariable",
												"inputs": {
													"name": "ErrorMessage",
													"value": "An error occurred in @{workflow()?['name']} (@{workflow()?['run']?['name']}) trying to call the ConfigurationManager GetConfigurationForStep operation"
												},
												"runAfter": {
													"GetConfiguration:NoFault:_Set_FaultMessage_variable": [
														"Succeeded"
													]
												}
											},
											"GetConfiguration:NoFault:_Set_FaultMessage_variable": {
												"type": "SetVariable",
												"inputs": {
													"name": "FaultMessage",
													"value": "@outputs('GetConfiguration:NoFault:_Create_Fault_Message')"
												},
												"runAfter": {
													"GetConfiguration:NoFault:_Create_Fault_Message": [
														"Succeeded"
													]
												}
											}
										}
									}
								}
							}
						},
						"runAfter": {
							"GetConfiguration:_Set_StatusCode_variable": [
								"Succeeded"
							]
						}
					},
					"GetConfiguration:_Set_StatusCode_variable": {
						"type": "SetVariable",
						"inputs": {
							"name": "StatusCode",
							"value": "@coalesce(outputs('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')?['statusCode'], 500)"
						},
						"runAfter": {
							"GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep": [
								"Succeeded",
								"Failed",
								"Skipped",
								"TimedOut"
							]
						}
					}
				},
				"runAfter": {
					"Initialize_TwoWayResponseContent_variable": [
						"Succeeded",
						"Failed",
						"Skipped",
						"TimedOut"
					]
				}
			},
			"Step:_Validate_Configuration": {
				"type": "If",
				"expression": {
					"and": [
						{
							"equals": [
								"@variables('Checkpoint')",
								"GetConfiguration"
							]
						}
					]
				},
				"actions": {
					"ValidateConfiguration:_Have_Valid_Properties": {
						"type": "If",
						"expression": {
							"and": [
								{
									"not": {
										"equals": [
											"@coalesce(variables('Configuration')?['httpReceiveAdapter']?['btsReceivePortName'], '')",
											""
										]
									}
								}
							]
						},
						"actions": {
							"ValidateConfiguration:Success:_Set_Checkpoint_variable": {
								"type": "SetVariable",
								"inputs": {
									"name": "Checkpoint",
									"value": "ValidateConfiguration"
								},
								"runAfter": {}
							}
						},
						"runAfter": {},
						"else": {
							"actions": {
								"ValidateConfiguration:Failure:_Set_Checkpoint_variable": {
									"type": "SetVariable",
									"inputs": {
										"name": "ErrorMessage",
										"value": "An error occurred in @{workflow()?['name']} (@{workflow()?['run']?['name']}): property btsReceivePortName is not set in configuration"
									},
									"runAfter": {}
								}
							}
						}
					}
				},
				"runAfter": {
					"Step:_Get_Configuration": [
						"Succeeded",
						"Failed",
						"Skipped",
						"TimedOut"
					]
				}
			},
			"Step:_Construct Message": {
				"type": "If",
				"expression": {
					"and": [
						{
							"equals": [
								"@variables('Checkpoint')",
								"ValidateConfiguration"
							]
						}
					]
				},
				"actions": {
					"ConstructMessage:_Get_MessageConstructor_EndpointUrl": {
						"type": "Http",
						"inputs": {
							"method": "GET",
							"uri": "@{appsetting('apimBaseUrl')}/aimroutingmanager/standardlogicappcallbackurl/@{encodeURIComponent(appsetting('systemApplicationResourceGroupName'))}/@{encodeURIComponent(appsetting('systemApplicationLogicAppName'))}/messageconstructor",
							"headers": {
								"Ocp-Apim-Subscription-Key": "@appsetting('apimSubscriptionKey')"
							},
							"queries": {
								"clearCache": "@parameters('clearCache')"
							},
							"retryPolicy": {
								"type": "none"
							}
						},
						"runAfter": {}
					},
					"ConstructMessage:GetUrl:_Did_we_Succeed": {
						"type": "If",
						"expression": {
							"and": [
								{
									"equals": [
										"@coalesce(outputs('ConstructMessage:_Get_MessageConstructor_EndpointUrl')?['statusCode'], 500)",
										200
									]
								}
							]
						},
						"runAfter": {
							"ConstructMessage:_Get_MessageConstructor_EndpointUrl": [
								"Succeeded",
								"Failed",
								"Skipped",
								"TimedOut"
							]
						},
						"else": {
							"actions": {
								"ConstructMessage:GetUrl:Failure:_Set_ErrorMessage_variable": {
									"type": "SetVariable",
									"inputs": {
										"name": "ErrorMessage",
										"value": "An error occurred in the @{workflow()?['name']} (@{workflow()?['run']?['name']}) workflow: @{coalesce(outputs('ConstructMessage:_Get_MessageConstructor_EndpointUrl')?['error']?['message'], outputs('ConstructMessage:_Get_MessageConstructor_EndpointUrl')?['body']?['message'])}"
									},
									"runAfter": {}
								},
								"ConstructMessage:GetUrl:Failure:_Set_FaultMessage_variable": {
									"type": "SetVariable",
									"inputs": {
										"name": "FaultMessage",
										"value": {
											"fault": {
												"faultActor": "@concat(workflow()?['name'], '.', actions('ConstructMessage:_Get_MessageConstructor_EndpointUrl')?['name'], ' (', workflow()?['run']?['name'], ')')",
												"faultCategory": "Error",
												"faultCode": "@{coalesce(outputs('ConstructMessage:_Get_MessageConstructor_EndpointUrl')?['statusCode'], outputs('ConstructMessage:_Get_MessageConstructor_EndpointUrl')?['body']?['statusCode'])}",
												"faultMessage": "@{coalesce(outputs('ConstructMessage:_Get_MessageConstructor_EndpointUrl')?['error']?['message'], outputs('ConstructMessage:_Get_MessageConstructor_EndpointUrl')?['body']?['message'])}",
												"faultReason": ""
											}
										}
									},
									"runAfter": {
										"ConstructMessage:GetUrl:Failure:_Set_ErrorMessage_variable": [
											"Succeeded"
										]
									}
								}
							}
						},
						"actions": {
							"ConstructMessage:_Call_MessageConstructor": {
								"type": "Http",
								"inputs": {
									"method": "POST",
									"uri": "@{body('ConstructMessage:_Get_MessageConstructor_EndpointUrl')?['logicAppUrl']}",
									"headers": {
										"Aim-Clear-Cache": "@coalesce(variables('Configuration')?['globalConfig']?['clearCache'], 'false')",
										"Aim-Enable-Trace": "@coalesce(variables('Configuration')?['globalConfig']?['enableTrace'], 'false')"
									},
									"body": {
										"$content": "@triggerBody()",
										"$contentTransferEncoding": "none",
										"$contentType": "@triggerOutputs()?['headers']?['Content-Type']",
										"properties": {
											"scenario": "@parameters('{{ resource_template.parameters.workflow_name }}.httpReceiveAdapter.scenarioName')",
											"btsReceivePortName": "@{coalesce(variables('Configuration')?['httpReceiveAdapter']?['btsReceivePortName'], '(unknownReceivePortName)')}",
											"btsReceivePortId": "@{coalesce(variables('Configuration')?['httpReceiveAdapter']?['btsReceivePortId'], '(unknownReceivePortId)')}",
											"btsInboundTransportType": "@{coalesce(variables('Configuration')?['httpReceiveAdapter']?['btsInboundTransportType'], '(unknownTransportType)')}",
											"btsInboundTransportLocation": "@{coalesce(variables('Configuration')?['httpReceiveAdapter']?['btsInboundTransportLocation'], '(unknownTransportLocation)')}"
										}
									},
									"retryPolicy": {
										"type": "none"
									}
								},
								"runAfter": {}
							},
							"ConstructMessage:_Set_StatusCode_variable": {
								"type": "SetVariable",
								"inputs": {
									"name": "StatusCode",
									"value": "@coalesce(outputs('ConstructMessage:_Call_MessageConstructor')?['statusCode'], 500)"
								},
								"runAfter": {
									"ConstructMessage:_Call_MessageConstructor": [
										"Succeeded",
										"Failed",
										"Skipped",
										"TimedOut"
									]
								}
							},
							"ConstructMessage:_Check_StatusCode": {
								"type": "Switch",
								"expression": "@variables('StatusCode')",
								"cases": {
									"Success": {
										"case": 200,
										"actions": {
											"ConstructMessage:Success:_Check_EnvelopeType": {
												"type": "Switch",
												"expression": "@body('ConstructMessage:_Call_MessageConstructor')?['header']?['properties']?['envelopeType']",
												"cases": {
													"ACK": {
														"case": "ack",
														"actions": {
															"ACK:_Set_ResponseMessage_variable": {
																"type": "SetVariable",
																"inputs": {
																	"name": "ResponseMessage",
																	"value": "@body('ConstructMessage:_Call_MessageConstructor')"
																},
																"runAfter": {}
															},
															"ACK:_Set_Checkpoint_variable": {
																"type": "SetVariable",
																"inputs": {
																	"name": "Checkpoint",
																	"value": "ConstructMessageACK"
																},
																"runAfter": {
																	"ACK:_Set_ResponseMessage_variable": [
																		"Succeeded"
																	]
																}
															}
														}
													},
													"NACK": {
														"case": "nack",
														"actions": {
															"NACK:_Set_ResponseMessage_variable": {
																"type": "SetVariable",
																"inputs": {
																	"name": "ResponseMessage",
																	"value": "@body('ConstructMessage:_Call_MessageConstructor')"
																},
																"runAfter": {}
															},
															"NACK:_Set_Checkpoint_variable": {
																"type": "SetVariable",
																"inputs": {
																	"name": "Checkpoint",
																	"value": "ConstructMessageNACK"
																},
																"runAfter": {
																	"NACK:_Set_ResponseMessage_variable": [
																		"Succeeded"
																	]
																}
															}
														}
													}
												},
												"default": {
													"actions": {
														"ConstructMessage:UnknownEnvelope:_Compose_NACK_Message": {
															"type": "Compose",
															"inputs": {
																"body": [
																	{
																		"$content": {
																			"code": "500",
																			"message": "@concat('Body returned by action ', actions('ConstructMessage:_Call_MessageConstructor')?['name'], ' is not an ACK or NACK. Envelope type is: ', coalesce(body('ConstructMessage:_Call_MessageConstructor')?['header']?['properties']?['envelopeType'], '(unknown)'))"
																		},
																		"$contentType": "application/json",
																		"$part": 1,
																		"$partType": "http://schemas.microsoft.com/aim#nack"
																	}
																],
																"header": {
																	"properties": {
																		"createDate": "@utcNow()",
																		"envelopeType": "nack",
																		"messageId": "@guid()",
																		"rootPart": 1,
																		"trackingId": ""
																	},
																	"routing": {
																		"MessageType": "http://schemas.microsoft.com/aim#nack"
																	},
																	"routingSlip": {},
																	"state": {}
																}
															},
															"runAfter": {}
														},
														"ConstructMessage:UnknownEnvelope:_Set_ResponseMessage_variable": {
															"type": "SetVariable",
															"inputs": {
																"name": "ResponseMessage",
																"value": "@outputs('ConstructMessage:UnknownEnvelope:_Compose_NACK_Message')"
															},
															"runAfter": {
																"ConstructMessage:UnknownEnvelope:_Compose_NACK_Message": [
																	"Succeeded"
																]
															}
														},
														"ConstructMessage:UnknownEnvelope:_Set_Checkpoint_variable": {
															"type": "SetVariable",
															"inputs": {
																"name": "Checkpoint",
																"value": "ConstructMessageNACK"
															},
															"runAfter": {
																"ConstructMessage:UnknownEnvelope:_Set_ResponseMessage_variable": [
																	"Succeeded"
																]
															}
														}
													}
												},
												"runAfter": {}
											}
										}
									}
								},
								"default": {
									"actions": {
										"ConstructMessage:Failure:_Create_NACK_Message": {
											"type": "Compose",
											"inputs": {
												"body": [
													{
														"$content": {
															"code": "500",
															"fault": {
																"faultActor": "@concat(workflow()?['name'], '.', actions('ConstructMessage:_Call_MessageConstructor')?['name'], ' (', workflow()?['run']?['name'], ')')",
																"faultCategory": "Error",
																"faultCode": "@{coalesce(outputs('ConstructMessage:_Call_MessageConstructor')?['statusCode'], outputs('ConstructMessage:_Call_MessageConstructor')?['body']?['statusCode'])}",
																"faultMessage": "@{coalesce(outputs('ConstructMessage:_Call_MessageConstructor')?['error']?['message'], outputs('ConstructMessage:_Call_MessageConstructor')?['body']?['message'])}",
																"faultReason": ""
															},
															"message": "@concat('Action ', actions('ConstructMessage:_Call_MessageConstructor')?['name'], ' resulted in an error response.')"
														},
														"$contentType": "application/json",
														"$part": 1,
														"$partType": "http://schemas.microsoft.com/aim#nack"
													}
												],
												"header": {
													"properties": {
														"createDate": "@utcNow()",
														"envelopeType": "nack",
														"messageId": "@guid()",
														"rootPart": 1,
														"trackingId": ""
													},
													"routing": {
														"MessageType": "http://schemas.microsoft.com/aim#nack"
													},
													"routingSlip": {},
													"state": {}
												}
											},
											"runAfter": {}
										},
										"ConstructMessage:Failure:_Set_ResponseMessage_variable": {
											"type": "SetVariable",
											"inputs": {
												"name": "ResponseMessage",
												"value": "@outputs('ConstructMessage:Failure:_Create_NACK_Message')"
											},
											"runAfter": {
												"ConstructMessage:Failure:_Create_NACK_Message": [
													"Succeeded"
												]
											}
										}
									}
								},
								"runAfter": {
									"ConstructMessage:_Set_StatusCode_variable": [
										"Succeeded"
									]
								}
							}
						}
					}
				},
				"runAfter": {
					"Step:_Validate_Configuration": [
						"Succeeded",
						"Failed",
						"Skipped",
						"TimedOut"
					]
				}
			}
		},
		"triggers": {
			"manual": {
				"type": "Request",
				"kind": "Http",
				"inputs": {
					"schema": {}
				}
			}
		},
		"contentVersion": "1.0.0.0"
	},
	"kind": "Stateful"
}
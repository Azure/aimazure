{
  "definition": {
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "contentVersion": "1.0.0.0",
    "triggers": {
      "manual": {
        "correlation": {
          "clientTrackingId": "@coalesce(triggerBody()?['header']?['properties']?['trackingId'], guid())"
        },
        "type": "Request",
        "kind": "Http",
        "inputs": {
        }
      }
    },
    "actions": {
      "Initialize_StatusCode_variable": {
        "runAfter": {},
        "type": "InitializeVariable",
        "inputs": {
          "variables": [
            {
              "name": "StatusCode",
              "type": "integer",
              "value": 500
            }
          ]
        }
      },
      "Initialize_FaultMessage_variable": {
        "runAfter": {
          "Initialize_StatusCode_variable": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable",
        "inputs": {
          "variables": [
            {
              "name": "FaultMessage",
              "type": "object"
            }
          ]
        }
      },
      "Initialize_ErrorMessage_variable": {
        "runAfter": {
          "Initialize_FaultMessage_variable": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable",
        "inputs": {
          "variables": [
            {
              "name": "ErrorMessage",
              "type": "string",
              "value": "An error occurred in the @{workflow()?['name']} (@{workflow()?['run']?['name']}) workflow"
            }
          ]
        }
      },
      "Initialize_Checkpoint_variable": {
        "runAfter": {
          "Initialize_ErrorMessage_variable": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable",
        "inputs": {
          "variables": [
            {
              "name": "Checkpoint",
              "type": "string"
            }
          ]
        }
      },
      "Initialize_Envelope_variable": {
        "runAfter": {
          "Initialize_Checkpoint_variable": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable",
        "inputs": {
          "variables": [
            {
              "name": "Envelope",
              "type": "object",
              "value": "@triggerBody()"
            }
          ]
        }
      },
      "Initialize_Configuration_variable": {
        "runAfter": {
          "Initialize_Envelope_variable": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable",
        "inputs": {
          "variables": [
            {
              "name": "Configuration",
              "type": "object"
            }
          ]
        }
      },
      "MessageSender:_Were_we_Successful": {
        "actions": {
          "Routing:_Call_RoutingSlipRouter": {
            "runAfter": {},
            "type": "Workflow",
            "inputs": {
              "body": "@variables('Envelope')",
              "headers": {
                "Aim-Clear-Cache": "@coalesce(variables('Configuration')?['globalConfig']?['clearCache'], 'false')",
                "Aim-Enable-Trace": "@coalesce(variables('Configuration')?['globalConfig']?['enableTrace'], 'false')",
                "Aim-Tracking-Id": "@{triggerBody()?['header']?['properties']?['trackingId']}",
                "Content-Type": "application/json"
              },
              "host": {
                "workflow": {
                    "id": "routingsliprouter"
                }
              },
              "retryPolicy": {
                "type": "none"
              }
            }
          },
          "Routing:_Check_StatusCode": {
            "runAfter": {
              "Routing:_Set_StatusCode_variable": [
                "Succeeded"
              ]
            },
            "cases": {
              "Success": {
                "case": 200,
                "actions": {
                  "Routing:Success:_Send_ACK-Content_response": {
                    "runAfter": {},
                    "type": "Response",
                    "kind": "Http",
                    "inputs": {
                      "body": "@body('Routing:_Call_RoutingSlipRouter')",
                      "headers": {
                        "Aim-Clear-Cache": "@coalesce(variables('Configuration')?['globalConfig']?['clearCache'], 'false')",
                        "Aim-Enable-Trace": "@coalesce(variables('Configuration')?['globalConfig']?['enableTrace'], 'false')",
                        "Aim-Tracking-Id": "@{triggerBody()?['header']?['properties']?['trackingId']}",
                        "Content-Type": "application/json"
                      },
                      "statusCode": 200
                    }
                  }
                }
              }
            },
            "default": {
              "actions": {
                "Routing:Error:_Build_NACK_message": {
                  "runAfter": {
                    "Routing:Error:_Do_we_have_a_Fault_Message": [
                      "Succeeded"
                    ]
                  },
                  "type": "Compose",
                  "inputs": {
                    "body": [
                      {
                        "$content": {
                          "code": "500",
                          "message": "@variables('ErrorMessage')",
                          "lastCheckpoint": "@variables('Checkpoint')",
                          "fault": "@variables('FaultMessage')"
                        },
                        "$contentType": "application/json",
                        "$part": 1,
                        "$partType": "http://schemas.microsoft.com/aim#nack"
                      }
                    ],
                    "header": {
                      "properties": {
                        "createDate": "@utcNow()",
                        "envelopeType": "nack",
                        "messageId": "@guid()",
                        "rootPart": 1,
                        "trackingId": "@triggerBody()?['header']?['properties']?['trackingId']"
                      },
                      "routing": {
                        "MessageType": "http://schemas.microsoft.com/aim#nack"
                      },
                      "routingSlip": {},
                      "state": {}
                    }
                  }
                },
                "Routing:Error:_Do_we_have_a_Fault_Message": {
                  "actions": {
                    "Routing:Error:Fault:_Set_ErrorMessage_variable": {
                      "runAfter": {
                        "Routing:Error:Fault:_Set_FaultMessage_variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "ErrorMessage",
                        "value": "An error occurred in @{workflow()?['name']} (@{workflow()?['run']?['name']}) trying to call the RoutingSlipRouter Logic App"
                      }
                    },
                    "Routing:Error:Fault:_Set_FaultMessage_variable": {
                      "runAfter": {},
                      "type": "SetVariable",
                      "inputs": {
                        "name": "FaultMessage",
                        "value": "@body('Routing:_Call_RoutingSlipRouter')"
                      }
                    }
                  },
                  "runAfter": {},
                  "else": {
                    "actions": {
                      "Routing:Error:NoFault:_Create_Fault_Message": {
                        "runAfter": {},
                        "type": "Compose",
                        "inputs": {
                          "fault": {
                            "faultActor": "@concat(workflow()?['name'], '.', actions('Routing:_Call_RoutingSlipRouter')?['name'], ' (', workflow()?['run']?['name'], ')')",
                            "faultCategory": "Error",
                            "faultCode": "@{coalesce(outputs('Routing:_Call_RoutingSlipRouter')?['statusCode'], outputs('Routing:_Call_RoutingSlipRouter')?['body']?['statusCode'], actions('Routing:_Call_RoutingSlipRouter')?['error']?['code'])}",
                            "faultMessage": "@{coalesce(outputs('Routing:_Call_RoutingSlipRouter')?['error']?['message'], outputs('Routing:_Call_RoutingSlipRouter')?['body']?['message'], actions('Routing:_Call_RoutingSlipRouter')?['error']?['message'])}",
                            "faultReason": "@{actions('Routing:_Call_RoutingSlipRouter')?['status']}"
                          }
                        }
                      },
                      "Routing:Error:NoFault:_Set_ErrorMessage_variable": {
                        "runAfter": {
                          "Routing:Error:NoFault:_Set_FaultMessage_variable": [
                            "Succeeded"
                          ]
                        },
                        "type": "SetVariable",
                        "inputs": {
                          "name": "ErrorMessage",
                          "value": "An error occurred in @{workflow()?['name']} (@{workflow()?['run']?['name']}) trying to call the RoutingSlipRouter Logic App"
                        }
                      },
                      "Routing:Error:NoFault:_Set_FaultMessage_variable": {
                        "runAfter": {
                          "Routing:Error:NoFault:_Create_Fault_Message": [
                            "Succeeded"
                          ]
                        },
                        "type": "SetVariable",
                        "inputs": {
                          "name": "FaultMessage",
                          "value": "@outputs('Routing:Error:NoFault:_Create_Fault_Message')"
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "not": {
                          "equals": [
                            "@body('Routing:_Call_RoutingSlipRouter')?['fault']",
                            null
                          ]
                        }
                      }
                    ]
                  },
                  "type": "If"
                },
                "Routing:Error:_Send_NACK_response": {
                  "runAfter": {
                    "Routing:Error:_Build_NACK_message": [
                      "Succeeded"
                    ]
                  },
                  "type": "Response",
                  "kind": "Http",
                  "inputs": {
                    "body": "@outputs('Routing:Error:_Build_NACK_message')",
                    "headers": {
                      "Aim-Clear-Cache": "@coalesce(variables('Configuration')?['globalConfig']?['clearCache'], 'false')",
                      "Aim-Enable-Trace": "@coalesce(variables('Configuration')?['globalConfig']?['enableTrace'], 'false')",
                      "Aim-Tracking-Id": "@{triggerBody()?['header']?['properties']?['trackingId']}",
                      "Content-Type": "application/json"
                    },
                    "statusCode": 200
                  }
                }
              }
            },
            "expression": "@variables('StatusCode')",
            "type": "Switch"
          },
          "Routing:_Set_StatusCode_variable": {
            "runAfter": {
              "Routing:_Call_RoutingSlipRouter": [
                "Succeeded",
                "Failed",
                "Skipped",
                "TimedOut"
              ]
            },
            "type": "SetVariable",
            "inputs": {
              "name": "StatusCode",
              "value": "@coalesce(outputs('Routing:_Call_RoutingSlipRouter')?['statusCode'], 500)"
            }
          }
        },
        "runAfter": {
          "Step:_DemoteMessageProperties": [
            "Succeeded",
            "Failed",
            "Skipped",
            "TimedOut"
          ]
        },
        "else": {
          "actions": {
            "Failure:_Build_NACK_message": {
              "runAfter": {},
              "type": "Compose",
              "inputs": {
                "body": [
                  {
                    "$content": {
                      "code": "500",
                      "message": "@variables('ErrorMessage')",
                      "lastCheckpoint": "@variables('Checkpoint')",
                      "fault": "@variables('FaultMessage')"
                    },
                    "$contentType": "application/json",
                    "$part": 1,
                    "$partType": "http://schemas.microsoft.com/aim#nack"
                  }
                ],
                "header": {
                  "properties": {
                    "createDate": "@utcNow()",
                    "envelopeType": "nack",
                    "messageId": "@guid()",
                    "rootPart": 1,
                    "trackingId": "@triggerBody()?['header']?['properties']?['trackingId']"
                  },
                  "routing": {
                    "MessageType": "http://schemas.microsoft.com/aim#nack"
                  },
                  "routingSlip": {},
                  "state": {}
                }
              }
            },
            "Failure:_Send_NACK_response": {
              "runAfter": {
                "Failure:_Build_NACK_message": [
                  "Succeeded"
                ]
              },
              "type": "Response",
              "kind": "Http",
              "inputs": {
                "body": "@outputs('Failure:_Build_NACK_message')",
                "headers": {
                  "Aim-Clear-Cache": "@coalesce(variables('Configuration')?['globalConfig']?['clearCache'], 'false')",
                  "Aim-Enable-Trace": "@coalesce(variables('Configuration')?['globalConfig']?['enableTrace'], 'false')",
                  "Aim-Tracking-Id": "@{triggerBody()?['header']?['properties']?['trackingId']}",
                  "Content-Type": "application/json"
                },
                "statusCode": 200
              }
            }
          }
        },
        "expression": {
          "and": [
            {
              "equals": [
                "@variables('Checkpoint')",
                "DemoteMessageProperties"
              ]
            }
          ]
        },
        "type": "If"
      },
      "Step:_Get_Configuration": {
        "actions": {
          "GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep": {
            "runAfter": {},
            "type": "Http",
            "inputs": {
              "method": "GET",
              "uri": "@{appsetting('apimBaseUrl')}/aimconfigurationmanager/configuration/@{encodeURIComponent(triggerBody()?['header']?['properties']?['scenario'])}/contentDemoter",
              "queries": {
                "clearCache": "@{coalesce(triggerOutputs()?['headers']?['Aim-Clear-Cache'], 'false')}"
              },
              "retryPolicy": {
                "type": "none"
              },
              "headers": {
                "Ocp-Apim-Subscription-Key": "@appsetting('apimSubscriptionKey')"
              }
            }
          },
          "GetConfiguration:_Check_Status_Code": {
            "runAfter": {
              "GetConfiguration:_Set_StatusCode_variable": [
                "Succeeded"
              ]
            },
            "cases": {
              "Success": {
                "case": 200,
                "actions": {
                  "GetConfiguration:Success:_Set_Checkpoint_variable": {
                    "runAfter": {
                      "GetConfiguration:Success:_Set_Configuration_variable": [
                        "Succeeded"
                      ]
                    },
                    "type": "SetVariable",
                    "inputs": {
                      "name": "Checkpoint",
                      "value": "GetConfiguration"
                    }
                  },
                  "GetConfiguration:Success:_Set_Configuration_variable": {
                    "runAfter": {},
                    "type": "SetVariable",
                    "inputs": {
                      "name": "Configuration",
                      "value": "@body('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')"
                    }
                  }
                }
              }
            },
            "default": {
              "actions": {
                "GetConfiguration:Failure:_Do_we_have_a_Fault_Message": {
                  "actions": {
                    "GetConfiguration:Fault:_Set_ErrorMessage_variable": {
                      "runAfter": {
                        "GetConfiguration:Fault:_Set_FaultMessage_variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "ErrorMessage",
                        "value": "An error occurred in @{workflow()?['name']} (@{workflow()?['run']?['name']}) trying to call the ConfigurationManager GetConfigurationForStep operation"
                      }
                    },
                    "GetConfiguration:Fault:_Set_FaultMessage_variable": {
                      "runAfter": {},
                      "type": "SetVariable",
                      "inputs": {
                        "name": "FaultMessage",
                        "value": "@body('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')"
                      }
                    }
                  },
                  "runAfter": {},
                  "else": {
                    "actions": {
                      "GetConfiguration:NoFault:_Create_Fault_Message": {
                        "runAfter": {},
                        "type": "Compose",
                        "inputs": {
                          "fault": {
                            "faultActor": "@concat(workflow()?['name'], '.', actions('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')?['name'], ' (', workflow()?['run']?['name'], ')')",
                            "faultCategory": "Error",
                            "faultCode": "@{coalesce(outputs('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')?['statusCode'], outputs('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')?['body']?['statusCode'], actions('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')?['error']?['code'])}",
                            "faultMessage": "@{coalesce(outputs('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')?['error']?['message'], outputs('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')?['body']?['message'], actions('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')?['error']?['message'])}",
                            "faultReason": "@{actions('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')?['status']}"
                          }
                        }
                      },
                      "GetConfiguration:NoFault:_Set_ErrorMessage_variable": {
                        "runAfter": {
                          "GetConfiguration:NoFault:_Set_FaultMessage_variable": [
                            "Succeeded"
                          ]
                        },
                        "type": "SetVariable",
                        "inputs": {
                          "name": "ErrorMessage",
                          "value": "An error occurred in @{workflow()?['name']} (@{workflow()?['run']?['name']}) trying to call the ConfigurationManager GetConfigurationForStep operation"
                        }
                      },
                      "GetConfiguration:NoFault:_Set_FaultMessage_variable": {
                        "runAfter": {
                          "GetConfiguration:NoFault:_Create_Fault_Message": [
                            "Succeeded"
                          ]
                        },
                        "type": "SetVariable",
                        "inputs": {
                          "name": "FaultMessage",
                          "value": "@outputs('GetConfiguration:NoFault:_Create_Fault_Message')"
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "not": {
                          "equals": [
                            "@body('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')?['fault']",
                            null
                          ]
                        }
                      }
                    ]
                  },
                  "type": "If"
                }
              }
            },
            "expression": "@variables('StatusCode')",
            "type": "Switch"
          },
          "GetConfiguration:_Set_StatusCode_variable": {
            "runAfter": {
              "GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep": [
                "Succeeded",
                "Failed",
                "Skipped",
                "TimedOut"
              ]
            },
            "type": "SetVariable",
            "inputs": {
              "name": "StatusCode",
              "value": "@coalesce(outputs('GetConfiguration:_Call_APIM_ConfigurationManager.GetConfigurationForStep')?['statusCode'], 500)"
            }
          }
        },
        "runAfter": {
          "Initialize_Configuration_variable": [
            "Succeeded",
            "Failed",
            "Skipped",
            "TimedOut"
          ]
        },
        "expression": {
          "and": [
            {
              "equals": [
                "@variables('Checkpoint')",
                ""
              ]
            }
          ]
        },
        "type": "If"
      },
      "Step:_DemoteMessageProperties": {
        "actions": {
          "DemoteMessageProperties:_Call_APIM_RoutingManager.DemoteMessageProperties": {
            "runAfter": {},
            "type": "Http",
            "inputs": {
              "body": "@variables('Envelope')",
              "method": "POST",
              "uri": "@{appsetting('apimBaseUrl')}/aimroutingmanager/demotemessageproperties",
              "queries": {
                "clearCache": "@coalesce(variables('Configuration')?['globalConfig']?['clearCache'], 'false')",
                "enableTrace": "@coalesce(variables('Configuration')?['globalConfig']?['enableTrace'], 'false')"
              },
              "retryPolicy": {
                "type": "none"
              },
              "headers": {
                "Aim-Tracking-Id": "@{triggerBody()?['header']?['properties']?['trackingId']}",
                "Content-Type": "application/json",
                "Ocp-Apim-Subscription-Key": "@appsetting('apimSubscriptionKey')"
              }
            }
          },
          "DemoteMessageProperties:_Check_Status_Code": {
            "runAfter": {
              "DemoteMessageProperties:_Set_StatusCode_variable": [
                "Succeeded"
              ]
            },
            "cases": {
              "Success": {
                "case": 200,
                "actions": {
                  "DemoteMessageProperties:Success:_Set_Checkpoint_variable": {
                    "runAfter": {
                      "DemoteMessageProperties:Success:_Set_Envelope_variable": [
                        "Succeeded"
                      ]
                    },
                    "type": "SetVariable",
                    "inputs": {
                      "name": "Checkpoint",
                      "value": "DemoteMessageProperties"
                    }
                  },
                  "DemoteMessageProperties:Success:_Set_Envelope_variable": {
                    "runAfter": {},
                    "type": "SetVariable",
                    "inputs": {
                      "name": "Envelope",
                      "value": "@body('DemoteMessageProperties:_Call_APIM_RoutingManager.DemoteMessageProperties')"
                    }
                  }
                }
              }
            },
            "default": {
              "actions": {
                "DemoteMessageProperties:Failure:_Do_we_have_a_Fault_Message": {
                  "actions": {
                    "DemoteMessageProperties:Fault:_Set_ErrorMessage_variable": {
                      "runAfter": {
                        "DemoteMessageProperties:Fault:_Set_FaultMessage_variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "ErrorMessage",
                        "value": "An error occurred in @{workflow()?['name']} (@{workflow()?['run']?['name']}) trying to call the RoutingManager DemoteMessageProperties operation"
                      }
                    },
                    "DemoteMessageProperties:Fault:_Set_FaultMessage_variable": {
                      "runAfter": {},
                      "type": "SetVariable",
                      "inputs": {
                        "name": "FaultMessage",
                        "value": "@body('DemoteMessageProperties:_Call_APIM_RoutingManager.DemoteMessageProperties')"
                      }
                    }
                  },
                  "runAfter": {},
                  "else": {
                    "actions": {
                      "DemoteMessageProperties:NoFault:_Create_Fault_Message": {
                        "runAfter": {},
                        "type": "Compose",
                        "inputs": {
                          "fault": {
                            "faultActor": "@concat(workflow()?['name'], '.', actions('DemoteMessageProperties:_Call_APIM_RoutingManager.DemoteMessageProperties')?['name'], ' (', workflow()?['run']?['name'], ')')",
                            "faultCategory": "Error",
                            "faultCode": "@{coalesce(outputs('DemoteMessageProperties:_Call_APIM_RoutingManager.DemoteMessageProperties')?['statusCode'], outputs('DemoteMessageProperties:_Call_APIM_RoutingManager.DemoteMessageProperties')?['body']?['statusCode'], actions('DemoteMessageProperties:_Call_APIM_RoutingManager.DemoteMessageProperties')?['error']?['code'])}",
                            "faultMessage": "@{coalesce(outputs('DemoteMessageProperties:_Call_APIM_RoutingManager.DemoteMessageProperties')?['error']?['message'], outputs('DemoteMessageProperties:_Call_APIM_RoutingManager.DemoteMessageProperties')?['body']?['message'], actions('DemoteMessageProperties:_Call_APIM_RoutingManager.DemoteMessageProperties')?['error']?['message'])}",
                            "faultReason": "@{actions('DemoteMessageProperties:_Call_APIM_RoutingManager.DemoteMessageProperties')?['status']}"
                          }
                        }
                      },
                      "DemoteMessageProperties:NoFault:_Set_ErrorMessage_variable": {
                        "runAfter": {
                          "DemoteMessageProperties:NoFault:_Set_FaultMessage_variable": [
                            "Succeeded"
                          ]
                        },
                        "type": "SetVariable",
                        "inputs": {
                          "name": "ErrorMessage",
                          "value": "An error occurred in @{workflow()?['name']} (@{workflow()?['run']?['name']}) trying to call the RoutingManager DemoteMessageProperties operation"
                        }
                      },
                      "DemoteMessageProperties:NoFault:_Set_FaultMessage_variable": {
                        "runAfter": {
                          "DemoteMessageProperties:NoFault:_Create_Fault_Message": [
                            "Succeeded"
                          ]
                        },
                        "type": "SetVariable",
                        "inputs": {
                          "name": "FaultMessage",
                          "value": "@outputs('DemoteMessageProperties:NoFault:_Create_Fault_Message')"
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "not": {
                          "equals": [
                            "@body('DemoteMessageProperties:_Call_APIM_RoutingManager.DemoteMessageProperties')?['fault']",
                            null
                          ]
                        }
                      }
                    ]
                  },
                  "type": "If"
                }
              }
            },
            "expression": "@variables('StatusCode')",
            "type": "Switch"
          },
          "DemoteMessageProperties:_Set_StatusCode_variable": {
            "runAfter": {
              "DemoteMessageProperties:_Call_APIM_RoutingManager.DemoteMessageProperties": [
                "Succeeded",
                "Failed",
                "Skipped",
                "TimedOut"
              ]
            },
            "type": "SetVariable",
            "inputs": {
              "name": "StatusCode",
              "value": "@coalesce(outputs('DemoteMessageProperties:_Call_APIM_RoutingManager.DemoteMessageProperties')?['statusCode'], 500)"
            }
          }
        },
        "runAfter": {
          "Step:_Get_Configuration": [
            "Succeeded",
            "Failed",
            "Skipped",
            "TimedOut"
          ]
        },
        "expression": {
          "and": [
            {
              "equals": [
                "@variables('Checkpoint')",
                "GetConfiguration"
              ]
            }
          ]
        },
        "type": "If"
      }
    }
  },
  "kind": "Stateful"
}